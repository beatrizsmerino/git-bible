[
	{
		"name": "get-git-version",
		"title": "Get git version",
		"description": "<p>Before you install Git, it's a good idea to check if you already have it installed by using the following command, which will return the version number installed on your computer. If not, follow the steps described in this <a href='https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Instalaci%C3%B3n-de-Git' target='_blank'>link</a> depending on your operating system.</p>",
		"code": "git --version"
	},
	{
		"name": "create-git-repository",
		"title": "Initialize git repository",
		"description": "<p>A Git repository is a virtual storage for your project. It allows you to save versions of the code that you can access whenever you need to. The following command, used only once during the initial setup of a new repository, will create a new <code>.git</code> subdirectory in your current working directory and a new <code>MASTER</code> branch.</p><p><a href='https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init' target='_blank'>Read more</a></p>",
		"code": "git init"
	},
	{
		"name": "get-commits",
		"title": "Get all commits made",
		"description": "<p>After you have made several commits, or if you have cloned a repository that already had a commit history, you will probably want to look back to see what modifications have been made.<br>This command shows a list of all the commits made, in reverse chronological order, i.e. the most recent ones are shown at the beginning. Each commit contains information about the identification number (<em>Secure Hash Algorithm</em>, <code>SHA-1</code>), the author's name and e-mail address, the date and the commit message.</p><p><a href='https://git-scm.com/book/es/v2/Fundamentos-de-Git-Ver-el-Historial-de-Confirmaciones' target='_blank'>Read more</a></p>",
		"code": "git log"
	},
	{
		"name": "get-commits-oneline",
		"title": "Get all commits made in a single line",
		"description": "<p>The <code>git log</code> command has many optional parameters for formatting the output of the commit information. The <code>--oneline</code> option shows the information of each commit in a single line with the first 6 characters of the <code>SHA-1</code> number, branchs, tags and the message.</p><p><a href='https://git-scm.com/book/es/v2/Fundamentos-de-Git-Ver-el-Historial-de-Confirmaciones#rlog_options' target='_blank'>Read more</a></p>",
		"code": "git log --oneline"
	},
	{
		"name": "get-commits-oneline-graph",
		"title": "Get graph of all commits made",
		"description": "<p>This command condenses the information of each commit into a single line, showing only the commit ID and the first line of the commit message and highlighting all references (branches, tags...).<br> It draws a graphical <em>ASCII</em> representation of the commit history structure. Prints additional lines between commits, so that the history chart is drawn correctly. And use asterisks to show which branch the commit was on.</p><p><a href='https://www.atlassian.com/git/tutorials/git-log' target='_blank'>Read more</a></p>",
		"code": "git log --oneline --graph --decorate"
	},
	{
		"name": "show-info-commit",
		"title": "Show the information for a commit",
		"description": "<p>This is a command-line tool that you use to view expanded details in Git objects such as blobs, trees, tags, and commits. In this case it shows the complete information for a commit (<code>SHA-1</code>, author, date and message).</p>",
		"code": "git show <SHA_COMMIT>"
	},
	{
		"name": "show-date-commit",
		"title": "Show date commit",
		"description": "<p>Formats the output information of a commit, showing the format of the committer date.</p><p><ul><li><code>%ai</code>: author date, <em>ISO 8601-like</em> format</li><li><code>%ci</code>: committer date, <em>ISO 8601-like</em> format</li></ul></p>",
		"code": "git show -s --format=%ci <SHA_COMMIT>"
	},
	{
		"name": "overwrite-date-commit",
		"title": "Overwrite date commit",
		"description": "<p>This command change the author and committer date of the commit already created.<br>Why change two dates? The <strong>author</strong> is the person who originally wrote the work, whereas the <strong>committer</strong> is the person who last applied the work.</p><p><a href='https://garysferrao.github.io/git/commit/date/2015/12/01/change-git-commit-date.html' target='_blank'>Read more</a></p>",
		"code": "GIT_COMMITTER_DATE='<YYYY-MM-DDThh:mm:ss±hh:mm>' git commit --amend --date='<YYYY-MM-DDThh:mm:ss±hh:mm>' -C <SHA_COMMIT>"
	},
	{
		"name": "add-folders-and-files-to-staging-area",
		"title": "Add folders and files to staging area",
		"description": "<p>We use the <code>git add</code> command to add the changes in the <strong>working directory</strong> (workspace) to the <strong>mounting area</strong> (index).<br>The first time, the folders and files was not tracked by git, not yet mounted or committed.</p><p>You can add them all at the same time (3 first commands) or by indicating the file paths (last command):</p>",
		"code": [
			["git add --all"],
			["git add -A"],
			["git add ."],
			["git add <PATH/TO/FOLDER/FILE> <PATH/TO/FOLDER/FILE>"]
		]
	},
	{
		"name": "create-commit",
		"title": "Create a commit with a message",
		"description": "<p>Commits are created to capture the status of one or more project files at a particular time. They are a set of changes (<strong>changeset</strong>), snapshots or milestones in the history of a Git project. Each commit contains the date it was made, the changes to each file, the author information, a message describing the content of the commit, and a unique identifier (<code>SHA-1</code>) to reference this commit.</p><p>This command only includes modifications to tracked files (those that have been added with git add at some point in their history)</p>",
		"code": "git commit -m '<MESSAGE_COMMIT>'"
	},
	{
		"name": "add-and-create-commit",
		"title": "Add folders and files to staging area and create a commit",
		"description": "<p> This combination immediately creates a confirmation of all prepared changes and applies an online confirmation message.<br> A shortcut command for advanced users that combines the options <code>-a</code> or <code>--all</code> (adds the modified or deleted files to the stage, but not the newly created ones, since they have not been reported to git for <strong>tracking</strong>) and <code>-m</code> or <code>--message</code> (with the specified message).</p><p><a href='https://www.atlassian.com/es/git/tutorials/saving-changes/git-commit' target='_blank'>Read more</a></p>",
		"code": "git commit -am '<MESSAGE_COMMIT>'"
	},
	{
		"name": "overwrite-last-commit",
		"title": "Overwrite the last commit",
		"description": "<p>If a commit message or file contains unclear, incorrect, sensitive, or missing information, you can correct it locally and send a new commit with a new message to GitHub. <br>Performing this command will change the commit ID, and if you do, you're creating a new commit that replaces the old one.</p><p><a href='https://blog.kirei.io/buenas-pr%C3%A1cticas-para-los-mensajes-de-commit-en-git-a9fc43a83821' target='_blank'>Read more</a></p>",
		"code": "git commit --amend"
	},
	{
		"name": "exit-without-save",
		"title": "Exit without save from the text window",
		"description": "<p>If you're inside the <strong>vi</strong> editor and you want to just come out from the text window without save the changes, typing the command and press <em>'enter'</em>.</p>",
		"code": ":q!"
	},
	{
		"name": "exit-and-save",
		"title": "Exit and save from the text window",
		"description": "<p>If you're inside the <strong>vi</strong> editor and you want come out from the text window and save the changes, typing the command and press <em>'enter'</em>.</p>",
		"code": ":wq"
	},
	{
		"name": "reflog",
		"title": "View reference log (reflog)",
		"description": "<p>Before talking about the reference journal, it should be remembered that <code>HEAD</code> is a reference (that is, a pointer) that points to the most recent commit of the current branch. There is a record of all the references taken by the <code>HEAD</code> pointer in Git called reflog (reference record shortcut). It is a record that will store all commits where the pointer passes, for example, it will be able to save branch changes or the addition of a commit.</p>",
		"code": "git reflog"
	},
	{
		"name": "reflog-remove",
		"title": "Prune all references with garbage collection and reclaim space",
		"description": "<p>The expire subcommand cleans up old or unreachable reflog entries. The expire subcommand has potential for data loss. This subcommand is not typically used by end users, but used by git internally. By default, the reflog expiration date is set to 90 days. An expire time can be specified by passing a command line argument or by setting a git configuration name.</p>",
		"code": [
			"rm -rf .git/refs/original/",
			"git reflog expire --expire=now --all",
			"git gc --aggressive --prune=now"
		]
	},
	{
		"name": "get-branches",
		"title": "Get all branches",
		"description": "<p>List both branches: remote and local. The current branch will be highlighted in color and marked an asterisk <em>'*'</em>.</p>",
		"code": [["git branch --all"], ["git branch -a"]]
	},
	{
		"name": "get-branches-local",
		"title": "Get all local branches",
		"description": "<p>A local branch is one whose full name starts with <code>refs/heads/</code>, the <code>git branch</code> command strips off this part.</p><p>There are several commands for view a list of all local branches created in the repository:</p>",
		"code": [["git branch"], ["git branch --list"], ["git branch -l"]]
	},
	{
		"name": "get-branches-remotes",
		"title": "Get all remote branches",
		"description": "<p>A remote-tracking branch is one whose full name starts with <code>refs/remotes/</code>, this command remove this part and it is used fot view a list of all remote branches created in the repository.</p>",
		"code": [["git branch --remotes"], ["git branch -r"]]
	},
	{
		"name": "summary-branches",
		"title": "Summary branches",
		"description": "<p>It shows us a summary of all the branches that are in a project together with their last modifications or commits.</p>",
		"code": "git show-branch"
	},
	{
		"name": "create-branch",
		"title": "Create a new branch",
		"description": "<p>You can create a new branch while in another and move to it later.</p>",
		"code": "git branch <NEW_NAME_BRANCH>"
	},
	{
		"name": "move-to-branch",
		"title": "Move to the branch",
		"description": "<p>When you try move to a local branch that does not exist, this command will search to see if there is a remote-tracking branch with a similar name. If so, it will create the local branch and set it up to track the remote-tracking branch.</p>",
		"code": "git checkout <NAME_BRANCH>"
	},
	{
		"name": "traking-another-branch",
		"title": "To make one branch track another",
		"description": "<p>To make one branch track another, first check out the first branch.</p>",
		"code": [
			"git checkout <LOCAL_NAME_BRANCH>",
			"git branch --set-upstream-to origin/<OTHER_NAME_BRANCH>"
		]
	},
	{
		"name": "create-and-move-to-branch",
		"title": "Create and move to branch",
		"description": "<p>You must use a separate branch for each function or issue you work on. Once you have created it, extract it locally so that all changes you make are applied to that branch. With this action, a branch named <code>NEW_FEATURE</code> is extracted from the <code>MASTER</code> branch, and the <code>-b</code> flag tells Git to create it if it doesn't already exist, otherwise, it is reset. That is to say, the branch is not reset/created unless <code>git checkout</code> is successful.</p>",
		"code": [
			["git checkout -B <NEW_NAME_BRANCH>"],
			["git checkout -b <NEW_NAME_BRANCH>"]
		]
	},
	{
		"name": "rename-current-branch",
		"title": "Rename current branch",
		"description": "<p></p><p>The optional parametters: <ul><li><code>--move</code> or <code>-m</code>: Move/rename a branch and the corresponding reflog.</li><li><code>-M</code>: It is a shortcut of <code>--delete --force</code></li></ul></p><p><a href='https://git-scm.com/docs/git-branch' target='_blank'>Read more</a></p>",
		"code": "git branch -m <NEW_NAME_BRANCH>"
	},
	{
		"name": "rename-local-branch",
		"title": "Rename a local branch",
		"description": "<p>If you want to rename a local branch while pointed to any branch.</p>",
		"code": [
			["git branch -m <OLD_NAME_BRANCH> <NEW_NAME_BRANCH>"]
		]
	},
	{
		"name": "rename-remote-branch",
		"title": "Rename a remote branch",
		"description": "<p>You are collaborating on a project with a group of people, and you have defined a naming convention for git branches. You created a new branch , pushed the changes to the remote repository, and realized that your branch name was incorrect. Luckily, Git allows you to rename the branch very easily using the next command.</p><p><a href='https://linuxize.com/post/how-to-rename-local-and-remote-git-branch/' target='_blank'>Read more</a></p>",
		"code": [
			[
				"git checkout <OLD_NAME_BRANCH>",
				"git branch -m <NEW_NAME_BRANCH>",
				"git push origin -u <NEW_NAME_BRANCH>",
				"git push origin --delete <OLD_NAME_BRANCH>"
			]
		]
	},
	{
		"name": "rename-and-push-branch",
		"title": "Rename and push branch",
		"description": "<p>Delete the old remote branch and push the new local branch.</p>",
		"code": "git push origin :<OLD_NAME_BRANCH> <NEW_NAME_BRANCH>"
	},
	{
		"name": "push-branch",
		"title": "Send the local branch to remote repository",
		"description": "<p>It is recommended to send the new branch to the central repository (<code>ORIGIN</code>), since this acts as a practical backup and, when collaborating with other developers, it allows them access to see the commits made in the new branch. The <code>-u</code> flag adds it as a remote tracking branch, after that it can be invoked without any parameters to automatically send the branch to the central repository.</p>",
		"code": "git push origin -u <NEW_NAME_BRANCH>"
	},
	{
		"name": "remove-branch",
		"title": "Remove a branch",
		"description": "<p>To delete a branch from git repository you must not be positioned in it.</p>",
		"code": [
			["git branch -D <NAME_BRANCH>"],
			["git branch -d <NAME_BRANCH>"]
		]
	},
	{
		"name": "get-tags",
		"title": "Get all tags made",
		"description": "<p>Get a simple list of the tags, if you want to make sure they exist and what their version numbers are.</p>",
		"code": [["git tag --list"], ["git tag -l"]]
	},
	{
		"name": "create-tag",
		"title": "Create a new tag",
		"description": "<p>In software development, Git tags represent a version of our code at a given moment in time. Unlike branches, tags are not mutable y always point to the same commit, them so people generally use them to mark important points in Git history (as the release points v1.0, v2.0 and so on).</p><p>The <strong>Semantic Versioning</strong> use a version format based on 3 integers separated by points: <em>X.Y.Z</em> (<em>Major.Minor.Patch</em>). This would be translated to gitflow branch structure as <em>release.feature.bug</em>.<br>The developer is the responsible for communicating the status of their software publishing this number.</p><p><a href='https://semver.org/' target='_blank'>Read more</a></p>",
		"code": "git tag -a '<TAG_VERSION>' -m '<MESSAGE_COMMIT>'"
	},
	{
		"name": "remove-tag-local",
		"title": "Remove a local tag",
		"description": "",
		"code": "git tag -d <TAG_VERSION>"
	},
	{
		"name": "remove-tag-remote",
		"title": "Remove a remote tag",
		"description": "",
		"code": "git push --delete origin <TAG_VERSION>"
	},
	{
		"name": "remove-tag-and-push",
		"title": "Remove a tag and push it",
		"description": "<p>If you have already pushed the tag to a remote repository (eg. GitHub) then you’ll also need to update the remote references right after renaming or deleting the tag from your local repo.</p><p>Here are two alternatives for remove a tag on the local and remote repository:</p><p><a href='https://cabrerahector.com/development/how-to-remove-a-git-tag-locally-and-remotely/' target='_blank'>Read more</a></p>",
		"code": [
			[
				"git tag -d <TAG_VERSION>",
				"git push origin :refs/tags/<TAG_VERSION>"
			],
			[
				"git push --delete origin <TAG_VERSION>",
				"git tag -d <TAG_VERSION>"
			]
		]
	},
	{
		"name": "rename-tag-local",
		"title": "Rename a local tag",
		"description": "<p>If you use tags in your projects, you probably have encountered some issue that forced you to remove the tag: <ul><li>There was a change that had to be shipped with this release and you forgot all about it.</li><li>There’s some debugging code that wasn’t supposed to be included with this release.</li><li>There’s a really obvious typo that everyone will notice right away.</li></ul></p><p>If you have not yet uploaded the tag to the remote repository, you can rename the tag with the following command:</p><p><a href='https://cabrerahector.com/development/how-to-remove-a-git-tag-locally-and-remotely/' target='_blank'>Read more</a></p>",
		"code": "git tag <NEW_TAG_VERSION> <OLD_TAG_VERSION>"
	},
	{
		"name": "rename-tag-and-push",
		"title": "Rename a tag and push it",
		"description": "<p>If you have made a mistake and need to rename a tag and update it in the remote repository, you should follow these steps:<br><ul><li>Rename the local tag.</li><li>Remove the old tag so that git knows about the change.</li><li>Tell the remote git repository that you've removed the old tag.</li><li>Update remote repository tags to upload new tag.</li></ul></p>",
		"code": [
			"git tag <NEW_TAG_VERSION> <OLD_TAG_VERSION>",
			"git tag -d <OLD_TAG_VERSION>",
			"git push origin :refs/tags/<OLD_TAG_VERSION>",
			"git push --tags"
		]
	},
	{
		"name": "update-tags-remote",
		"title": "Update the tags of the remote repository",
		"description": "",
		"code": "git pull --prune --tags"
	},
	{
		"name": "",
		"title": "",
		"description": "",
		"code": ""
	}
]
