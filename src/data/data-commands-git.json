[
	{
		"name": "get-git-version",
		"title": "Get version",
		"description": "Get git version",
		"code": "git --version"
	},
	{
		"name": "create-git-repository",
		"title": "Initialize repository",
		"description": "Initialize git repository",
		"code": "git init"
	},
	{
		"name": "get-commits",
		"title": "Get all commits made",
		"description": "Get all commits made, with his complete information (sha, author, date and message)",
		"code": "git log"
	},
	{
		"name": "get-commits-oneline",
		"title": "Get all commits made in a single line",
		"description": "Get all commits made, with his information in a single line (sha with 6 cifres and message)",
		"code": "git log --oneline"
	},
	{
		"name": "get-commits-oneline-graph",
		"title": "Get graph of all commits made",
		"description": "Get all commits made, with his information in a single line (sha with 6 cifres and message) and in a graphic",
		"code": "git log --oneline --graph --decorate"
	},
	{
		"name": "show-info-commit",
		"title": "Show the information for a commit",
		"description": "Get the complete information for a commit (sha, author, date and message)",
		"code": "git show <SHA_COMMIT>"
	},
	{
		"name": "show-date-commit",
		"title": "Show date commit",
		"description": "Get the date of a specific commit",
		"code": "git show -s --format=%ci <SHA_COMMIT>"
	},
	{
		"name": "overwrite-date-commit",
		"title": "Overwrite date commit",
		"description": "Overwrite the date of a specific commit",
		"code": "GIT_COMMITTER_DATE='<YYYY-MM-DDThh:mm:ss±hh:mm>' git commit --amend --date='<YYYY-MM-DDThh:mm:ss±hh:mm>' -C <SHA_COMMIT>"
	},
	{
		"name": "add-folders-and-files-to-staging-area",
		"title": "Add folders and files to staging area",
		"description": "Add folders and files to staging area (index)",
		"code": "git add <ROOT_FOLDER/FILE>"
	},
	{
		"name": "create-commit",
		"title": "Create a commit with a message",
		"description": "Create a new commit with a message",
		"code": "git commit -m '<MESSAGE_COMMIT>'"
	},
	{
		"name": "overwrite-last-commit",
		"title": "Overwrite the last commit",
		"description": "Overwrite the last commit",
		"code": "git commit --amend"
	},
	{
		"name": "add-and-create-commit",
		"title": "Add folders and files to staging area and create a commit",
		"description": "Add folders and files to staging area (index) and create a commit",
		"code": "git commit -am '<MESSAGE_COMMIT>'"
	},
	{
		"name": "exit-without-save",
		"title": "Exit without save from the text window",
		"description": "If you're inside the vi editor and you want to just come out from the text window without save the changes, typing the command and press 'enter'.",
		"code": ":q!"
	},
	{
		"name": "exit-and-save",
		"title": "Exit and save from the text window",
		"description": "If you're inside the vi editor and you want come out from the text window and save the changes, typing the command and press 'enter'.",
		"code": ":wq"
	},
	{
		"name": "reflog",
		"title": "View reference log (reflog)",
		"description": "Before talking about the reference journal, it should be remembered that HEAD is a reference (that is, a pointer) that points to the most recent commit of the current branch. There is a record of all the references taken by the HEAD pointer in Git called reflog (reference record shortcut). It is a record that will store all commits where the pointer passes, for example, it will be able to save branch changes or the addition of a commit.",
		"code": "git reflog"
	},
	{
		"name": "reflog-remove",
		"title": "Prune all references with garbage collection and reclaim space",
		"description": "The expire subcommand cleans up old or unreachable reflog entries. The expire subcommand has potential for data loss. This subcommand is not typically used by end users, but used by git internally. By default, the reflog expiration date is set to 90 days. An expire time can be specified by passing a command line argument or by setting a git configuration name.",
		"code": [
			"rm -rf .git/refs/original/",
			"git reflog expire --expire=now --all",
			"git gc --aggressive --prune=now"
		]
	},
	{
		"name": "get-branches",
		"title": "Get all branches",
		"description": "List both branches: remote and local. The current branch will be highlighted in color and marked an asterisk '*'.",
		"code": "git branch -a"
	},
	{
		"name": "get-branches-local",
		"title": "Get all local branches",
		"description": "A local branch is one whose full name starts with 'refs/heads/', the 'git branch' command strips off this part. There are several commands for view a list of all local branches created in the repository:",
		"code": [["git branch"], ["git branch --list"], ["git branch -l"]]
	},
	{
		"name": "get-branches-remotes",
		"title": "Get all remote branches",
		"description": "A remote-tracking branch is one whose full name starts with 'refs/remotes/', this command remove this part and it is used fot view a list of all remote branches created in the repository.",
		"code": "git branch -r"
	},
	{
		"name": "summary-branches",
		"title": "Summary branches",
		"description": "It shows us a summary of all the branches that are in a project together with their last modifications or commits.",
		"code": "git show-branch"
	},
	{
		"name": "create-branch",
		"title": "Create a new branch",
		"description": "You can create a new branch while in another and move to it later.",
		"code": "git branch <NEW_NAME_BRANCH>"
	},
	{
		"name": "move-to-branch",
		"title": "Move to the branch",
		"description": "When you try move to a local branch that does not exist, this command will search to see if there is a remote-tracking branch with a similar name. If so, it will create the local branch and set it up to track the remote-tracking branch.",
		"code": "git checkout <NAME_BRANCH>"
	},
	{
		"name": "traking-another-branch",
		"title": "To make one branch track another",
		"description": "To make one branch track another, first check out the first branch.",
		"code": [
			"git checkout <LOCAL_NAME_BRANCH>",
			"git branch --set-upstream-to origin/<OTHER_NAME_BRANCH>"
		]
	},
	{
		"name": "create-and-move-to-branch",
		"title": "Create and move to branch",
		"description": "You must use a separate branch for each function or issue you work on. Once you have created it, extract it locally so that all changes you make are applied to that branch. With this action, a branch named '<NEW_FEATURE>' is extracted from the MASTER branch, and the '-b' flag tells Git to create it if it doesn't already exist, otherwise, it is reset. That is to say, the branch is not reset/created unless 'git checkout' is successful.",
		"code": [
			["git checkout -B <NEW_NAME_BRANCH>"],
			["git checkout -b <NEW_NAME_BRANCH>"]
		]
	},
	{
		"name": "rename-branch",
		"title": "Rename a branch",
		"description": "If you want to rename a local branch while pointed to any branch.",
		"code": "git branch -m <OLD_NAME_BRANCH> <NEW_NAME_BRANCH>"
	},
	{
		"name": "rename-current-branch",
		"title": "Rename current branch",
		"description": "If you want to rename the current local branch.",
		"code": "git branch -m <NEW_NAME_BRANCH>"
	},
	{
		"name": "rename-and-push-branch",
		"title": "Rename and push branch",
		"description": "Delete the old remote branch and push the new local branch.",
		"code": "git push origin :<OLD_NAME_BRANCH> <NEW_NAME_BRANCH>"
	},
	{
		"name": "push-branch",
		"title": "Send the local branch to remote repository",
		"description": "It is recommended to send the new branch to the central repository (ORIGIN), since this acts as a practical backup and, when collaborating with other developers, it allows them access to see the commits made in the new branch. The '-u' flag adds it as a remote tracking branch, after that it can be invoked without any parameters to automatically send the branch to the central repository.",
		"code": "git push origin -u <NEW_NAME_BRANCH>"
	},
	{
		"name": "remove-branch",
		"title": "Remove a branch",
		"description": "To delete a branch from Git you must not be positioned in it.",
		"code": "git branch -D <NAME_BRANCH>"
	},
	{
		"name": "get-tags",
		"title": "Get all tags made",
		"description": "Get a simple list of the tags, if you want to make sure they exist and what their version numbers are.",
		"code": "git tag -l"
	},
	{
		"name": "create-tag",
		"title": "Create a new tag",
		"description": "Create a new tag (mark, label, or pointer that always points to a commit) on the local repository",
		"code": "git tag -a '<TAG_VERSION>' -m '<MESSAGE_COMMIT>'"
	},
	{
		"name": "remove-tag-local",
		"title": "Remove a local tag",
		"description": "Delete a tag on the local repository",
		"code": "git tag -d <TAG_VERSION>"
	},
	{
		"name": "remove-tag-remote",
		"title": "Remove a remote tag",
		"description": "Delete a tag on the remote repository",
		"code": "git push --delete origin <TAG_VERSION>"
	},
	{
		"name": "remove-tag-and-push",
		"title": "Remove a tag and push it",
		"description": "Two alternatives of remove a tag on the local and remote repository",
		"code": [
			[
				"git tag -d <TAG_VERSION>",
				"git push origin : refs/tags/<TAG_VERSION>"
			],
			[
				"git push --delete origin <TAG_VERSION>",
				"git tag -d <TAG_VERSION>"
			]
		]
	},
	{
		"name": "rename-tag-local",
		"title": "Rename a local tag",
		"description": "Rename a tag on the local repository",
		"code": "git tag <NEW_TAG_VERSION> <OLD_TAG_VERSION>"
	},
	{
		"name": "rename-tag-and-push",
		"title": "Rename a tag and push it",
		"description": "Rename a tag and upload it to the remote repository",
		"code": [
			"git tag <NEW_TAG_VERSION> <OLD_TAG_VERSION>",
			"git tag -d <OLD_TAG_VERSION>",
			"git push origin :refs/tags/<OLD_TAG_VERSION>",
			"git push --tags"
		]
	},
	{
		"name": "update-tags-remote",
		"title": "Update the tags of the remote repository",
		"description": "Update the tags remote repository with the local tags",
		"code": "git pull --prune --tags"
	},
	{
		"name": "",
		"title": "",
		"description": "",
		"code": ""
	}
]
